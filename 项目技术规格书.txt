
## Cloudflare Workers 团队任务管理系统：项目需求文档

### 一、 项目概述与技术栈

| 属性 | 描述 |
| :--- | :--- |
| **项目名称** | Workers TaskFlow (无服务器团队任务协作平台) |
| **目标** | 构建一个基于 Cloudflare Workers 和 R2 的高性能、免数据库（Database-less）团队任务管理与资产交接系统。 |
| **运行环境** | **Cloudflare Workers** (JavaScript) |
| **核心存储** | **Cloudflare R2 Storage** (所有结构化数据和非结构化文件) |
| **数据格式** | **JSON 文件** (用于存储结构化数据，模拟数据库表) |
| **语言** |  JavaScript |

-----

### 二、 核心架构约束（LLM 必须遵守）

以下约束条件对项目成功至关重要，是生成代码的最高优先级：

1.  **单文件后端核心：** 所有 Workers 后端逻辑、路由处理、R2 数据操作必须集中在**一个独立的 `index.js` 文件**中。
2.  **前后端分离（模拟）：**
      * Workers 文件 (`index.js`) 必须能够通过路由**分别返回** HTML、CSS 和客户端 JS 文件内容，以模拟静态文件托管。
      * 所有前端文件内容（`/index.html`, `/styles.css`, `/script.js` 等）必须作为 **`index.js` 文件中的字符串常量**存在，并通过请求路径进行分发。
3.  **数据原子性：** R2 不支持事务。对于 `tasks.json` 和 `assets.json` 等共享数据，**必须**遵循“先读、后改、再写回”的乐观写入策略，并知晓并发冲突的风险。

-----

### 三、 认证与用户管理方案

系统采用高效、免注册的 URL Token 认证机制。

#### 1\. 用户模型与存储

| R2 Key 路径 | 存储内容 | 数据结构 |
| :--- | :--- | :--- |
| `config:share_links` | 所有用户 Token 和元数据 | JSON 字典/对象 (Key: token, Value: User) |

```typescript
// User JSON Schema (存储在 config:share_links)
interface User {
    username: string; // 唯一用户ID，例如 'userA'
    token: string;    // 用于 URL 访问的密钥，例如 'a1b2c3d4'
    role: 'admin' | 'member';
}
```

#### 2\. 认证流程

  * **管理员：** 访问 `/admin/<ADMIN_TOKEN>` 时，Workers 必须识别其 `role: 'admin'` 权限。
  * **团队成员：** 访问 `/app/<USER_TOKEN>` 时，Workers 必须识别其 `role: 'member'` 权限。
  * **授权：**
      * **管理员**拥有所有权限，包括**新增/删除用户**、查看/修改所有数据。
      * **成员**只能管理自己的待办事项，但可以查看所有公开的任务列表。

-----

### 四、 R2 数据模型与存储结构

所有结构化数据均以 JSON 数组的形式存储。

#### 1\. 任务数据 (Tasks)

| R2 Key 路径 | 存储内容 |
| :--- | :--- |
| `data:tasks` | 所有任务的 JSON 数组 |

```typescript
// Task JSON Schema
interface Task {
    id: string; // UUID
    title: string;
    description: string;
    status: 'To Do' | 'In Progress' | 'Completed';
    progress: number; // 进度百分比 (0-100)，必须支持
    assignee_id: string; // 指派人 (User.username)
    creator_id: string;
    due_date: string; // ISO 格式日期
}
```

#### 2\. 物品/资产数据 (Assets)

| R2 Key 路径 | 存储内容 |
| :--- | :--- |
| `data:assets` | 所有物品的 JSON 数组 |

```typescript
// Asset JSON Schema
interface Asset {
    id: string; // UUID
    name: string;
    current_owner_id: string; // 当前保管人 (User.username)
    image_r2_key: string; // 关联的 R2 图片文件的 Key (用于图片访问)
    transfer_history: AssetTransfer[];
}

interface AssetTransfer {
    from_owner_id: string;
    to_owner_id: string;
    transfer_time: string; // ISO 格式时间
}
```

#### 3\. 文件/图片存储

| R2 Key 路径 | 存储内容 |
| :--- | :--- |
| `files:images/<UUID>-<filename>` | 原始图片文件 |

-----

### 五、 核心 API 接口规范

Worker 必须实现以下 RESTful API 路由：

| 功能模块 | 方法 | 路由 | 描述 | 身份要求 |
| :--- | :--- | :--- | :--- | :--- |
| **任务管理** | `POST` | `/api/tasks` | 创建新任务或更新任务进度 | Member/Admin |
| **任务管理** | `DELETE` | `/api/tasks/:id` | 删除任务 | Member/Admin |
| **任务管理** | `GET` | `/api/tasks` | 获取所有任务列表（支持状态筛选） | Member/Admin |
| **物品管理** | `POST` | `/api/assets` | **登记新物品**（同时记录初始保管人） | Admin |
| **物品管理** | `POST` | `/api/assets/transfer` | **物品交接**（需传入 `assetId` 和 `newOwnerId`，更新历史记录） | Member/Admin |
| **物品管理** | `GET` | `/api/assets` | 获取所有物品列表 | Member/Admin |
| **用户管理** | `POST` | `/api/users/add` | **管理员添加新用户**（生成新的 Token） | Admin |
| **文件服务** | `GET` | `/api/files/presign-upload` | **获取 R2 预签名上传 URL**（需带 `filename` 参数） | Member/Admin |
| **文件服务** | `GET` | `/api/files/:key` | Workers 代理 R2 文件下载或返回图片 | Public |

### 六、 前端与部署要求

1.  **前端内容：** Worker 必须包含以下静态资源的字符串内容，并在请求时返回正确的 `Content-Type`：
      * `/index.html` (作为 `/` 路由的默认响应)
      * `/styles.css`
      * `/script.js`
2.  **HTML 渲染：** `/index.html` 模板必须包含用于插入动态数据（任务列表、物品列表、用户列表）的占位符。
3.  **图片上传逻辑：**
      * `/script.js` 中必须包含客户端 JavaScript 逻辑，用于：
        1.  调用 `/api/files/presign-upload` 获取 URL。
        2.  使用获取到的 URL 将文件通过 **PUT 请求**直接上传到 R2。
        3.  将返回的 `image_r2_key` 字段作为隐藏输入提交给 `/api/assets` API。
4.  **任务进度显示：** 任务列表中必须用视觉元素（例如进度条或百分比文本）清晰显示 `progress` 字段（0-100）。